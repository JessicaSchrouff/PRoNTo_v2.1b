function [Phi_all,ID,fid] = prt_getKernelModel (PRT,prt_dir,mid)% Function to load the kernels according to the samples considered in a %given model. These kernels will be added if the machine is a single kernel%technique.%% Inputs:% -------% PRT:             data structure% prt_dir:        path for PRT.mat (string)% mid :           index of model in the data structure/ PRT.mat%% Output:% --------% Phi_all :  cell array with one kernel per cell (in case of%    multiple kernels) or a single cell with the samples considered in the%    specified model, as defined by the class selection.% ID :       the ID matrix for the considered samples% fid :      index of feature set in data structure / PRT.mat% %__________________________________________________________________________% Copyright (C) 2011 Machine Learning & Neuroimaging Laboratory% Written by J Schrouff% $Id: prt_getKernelModel.m 855 2014-05-27 09:35:15Z schrouff $% load data files and configure ID matrixdisp('Loading data files.....>>');samp_idx = PRT.model(mid).input.samp_idx;   % which samples are in the modelPhi_all=[];for i = 1:length(PRT.model(mid).input.fs)    %Backwards compatibility with v0 and v1: transform kernel into cell if needed    if PRT.model(mid).input.use_kernel        fid = prt_init_fs(PRT, PRT.model(mid).input.fs(i));        load(fullfile(prt_dir, PRT.fs(fid).k_file));        if ~iscell(Phi)            Phi = {Phi};        end    end        %first case: combine feature sets    if length(PRT.model(mid).input.fs)>1               if i == 1            ID = PRT.fs(fid).id_mat(samp_idx,:);        end                if PRT.model(mid).input.use_kernel            for j = 1:length(Phi)                Phi_all = [Phi_all, {Phi{j}(samp_idx,samp_idx)}]; % in case one feature set comprises multiple kernels already            end        else            error('training with features not implemented yet');            %vname = whos('-file', [prt_dir,PRT.fs(fid).fs_file]);            %eval(['Phi_all{',num2str(i),'}=',vname,'(samp_idx,:);']);        end    else        %If only one feature set, load kernel to see which case        if PRT.model(mid).input.use_kernel            ID = PRT.fs(fid).id_mat(samp_idx,:);            if length(Phi)==1                Phi_all{1} = Phi{1}(samp_idx,samp_idx);            else                %Check that if multiple kernels, MKL was selected,                %otherwise kernels will be added when calling prt_machine                 if isempty(strfind(PRT.model(mid).input.machine.function,'MKL'))                     disp(['Multiple kernels but machine cannot deal with them, adding the kernels'])                     Phi_tmp = zeros(length(samp_idx));                     for j=1:length(Phi)                         try                             %add kernels                             tp = Phi{j}(samp_idx,samp_idx);                             Phi_tmp=Phi_tmp + tp;                         catch                             error('prt_cv_model:KernelsWithDifferentDimensions', ...                                 'Kernels cannot be added since they have different dimensions')                         end                     end                     Phi_all{1} = Phi_tmp;                     clear Phi_tmp                 else                     Phi_all=cell(1,length(Phi));                     for j=1:length(Phi)                         Phi_all{j}=Phi{j}(samp_idx,samp_idx);                     end                 end            end        else            error('training with features not implemented yet');        end    endendclear Phi